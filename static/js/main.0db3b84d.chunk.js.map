{"version":3,"sources":["Components/QrGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["QrGenerator","qrCode","React","code","setCode","QRCode","toDataURL","errorCorrectionLevel","width","then","src","alt","App","useState","result","setResult","className","onClick","delay","onError","err","console","error","onScan","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAmBeA,MAhBf,YAAkC,IAAXC,EAAU,EAAVA,OAAU,EACNC,WAAeD,GADT,mBACxBE,EADwB,KAClBC,EADkB,KAahC,OAVAF,mBACC,WACCG,IAAOC,UAAUL,EAAQ,CACxBM,qBAAsB,IACtBC,MAAO,MACLC,KAAKL,KAET,CAAEH,IAGI,qBAAKS,IAAKP,EAAMQ,IAAI,a,MCyBbC,MApCf,WAAgB,IAAD,EACgBC,mBAAS,MADzB,mBACNC,EADM,KACEC,EADF,KAWd,OACG,qCACA,2EAGF,qBAAKC,UAAU,mBAAf,SACC,qBAAKA,UAAU,SAAf,SACEF,EACD,qCACC,cAAC,EAAD,CAAab,OAAQa,IACrB,4BAAIA,IACJ,iCACC,wBAAQE,UAAU,cAAcC,QAAS,kBAAIF,EAAU,OAAvD,oBACA,wBAAQC,UAAU,cAAcC,QAAQ,IAAxC,sCAIF,cAAC,IAAD,CAAUC,MAAO,IAAKC,QArBL,SAACC,GACpBC,QAAQC,MAAMF,IAoBgCG,OA1B5B,SAACC,GACfA,GACHT,EAAUS,cCGEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0db3b84d.chunk.js","sourcesContent":["import * as React from 'react';\nimport QRCode from 'qrcode';\n\nfunction QrGenerator({ qrCode }) {\n\tconst [ code, setCode ] = React.useState(qrCode);\n\n\tReact.useLayoutEffect(\n\t\t() => {\n\t\t\tQRCode.toDataURL(qrCode, {\n\t\t\t\terrorCorrectionLevel: 'H',\n\t\t\t\twidth: 500\n\t\t\t}).then(setCode);\n\t\t},\n\t\t[ qrCode ]\n\t);\n\n\treturn <img src={code} alt=\"QR Code\" />;\n}\n\nexport default QrGenerator;\n","import React, { useState } from 'react';\nimport QrReader from 'react-qr-reader';\nimport QrGenerator from './Components/QrGenerator';\nimport './App.css';\n\nfunction App() {\n\tconst [ result, setResult ] = useState(null);\n\tconst handleScan = (data) => {\n\t\tif (data) {\n\t\t\tsetResult(data);\n\t\t}\n\t};\n\tconst handleError = (err) => {\n\t\tconsole.error(err);\n\t};\n\n\treturn (\n    <>\n    <header>\n      header - styles to be taken from QDMS\n    </header>\n\t\t<div className=\"qrscan-container\">\n\t\t\t<div className=\"qrscan\">\n\t\t\t\t{result?\n\t\t\t\t<>\n\t\t\t\t\t<QrGenerator qrCode={result} />\n\t\t\t\t\t<p>{result}</p>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<button className=\"test-button\" onClick={()=>setResult(null)}>Rescan</button>\n\t\t\t\t\t\t<button className=\"test-button\" onClick=\"#\">Go to product page</button>\n\t\t\t\t\t</span>\n\t\t\t\t</>\n\t\t\t\t:\n\t\t\t\t<QrReader delay={300} onError={handleError} onScan={handleScan}  />\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n    </>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}